# render.yaml
# Plan de despliegue para Render

services:
  # 1. Backend de Java (BPMN Engine)
  - type: web
    name: bpmn-engine-core
    runtime: docker
    repo: https://github.com/davidvegad/camunda.git # ¡Cambia esto!
    dockerfilePath: ./bpmn-engine-core/Dockerfile
    healthCheckPath: /actuator/health # Asegúrate de tener Spring Actuator
    envVars:
      - fromGroup: backend-secrets # Importa todas las variables del grupo backend-secrets
      - key: CAMUNDA_BPM_WEBAPP_CORS_ALLOWED_ORIGINS
        value: http://{{ .Service.angular-frontend.host }}:{{ .Service.angular-frontend.port }} # Construye la URL del frontend

  # 2. Backend de Node.js (Chatbot)
  - type: web
    name: chatbot-backend
    runtime: docker
    repo: https://github.com/davidvegad/camunda.git # ¡Cambia esto!
    dockerfilePath: ./chatbot-backend/Dockerfile
    healthCheckPath: /api/health # Deberías crear este endpoint de salud
    envVars:
      - fromGroup: chatbot-secrets # Importa todas las variables del grupo chatbot-secrets
      - key: BACKEND_URL
        value: http://{{ .Service.bpmn-engine-core.host }}:{{ .Service.bpmn-engine-core.port }} # Construye la URL del backend Java
      - key: CORS_ORIGIN
        value: http://{{ .Service.angular-frontend.host }}:{{ .Service.angular-frontend.port }} # Construye la URL del frontend

  # 3. Frontend de Angular
  - type: web
    name: angular-frontend
    runtime: docker
    repo: https://github.com/davidvegad/camunda.git # ¡Cambia esto!
    dockerfilePath: ./angular-frontend/camunda-task-app/Dockerfile
    envVars:
      - key: VITE_BPMN_ENGINE_API_URL # Usaremos VITE_ para que Angular lo exponga
        value: http://{{ .Service.bpmn-engine-core.host }}:{{ .Service.bpmn-engine-core.port }} # Construye la URL del backend Java
      - key: VITE_CHATBOT_API_URL
        value: http://{{ .Service.chatbot-backend.host }}:{{ .Service.chatbot-backend.port }} # Construye la URL del backend Node.js
